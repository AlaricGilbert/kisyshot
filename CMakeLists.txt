cmake_minimum_required(VERSION 3.16)
project(kisyshot)

if (MSVC_VERSION GREATER_EQUAL "1900")
    include(CheckCXXCompilerFlag)
    CHECK_CXX_COMPILER_FLAG("/std:c++latest" _cpp_latest_flag_supported)
    if (_cpp_latest_flag_supported)
        add_compile_options("/std:c++latest")
    endif()
    add_compile_definitions(NOMINMAX)
else()
    if(MINGW)
        add_definitions(-D_WIN32_WINNT=0x0600)
    endif()
    if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        set(CMAKE_CXX_FLAGS "-g -Wall -Wno-long-long -pedantic -stdlib=libc++")
    else()
        set(CMAKE_CXX_FLAGS "-g -Wall -Wno-long-long -pedantic")
    endif()
    set(CMAKE_CXX_STANDARD 17)
endif()
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/artifacts)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/artifacts)
include_directories(include)

execute_process(COMMAND cp -r ${PROJECT_SOURCE_DIR}/test/cases ${PROJECT_SOURCE_DIR}/artifacts/)

aux_source_directory(src ctx)
aux_source_directory(src/ast ast)
aux_source_directory(src/ast/syntax syntax)
aux_source_directory(src/compiler compiler)
aux_source_directory(src/diagnostics diagnostic)

aux_source_directory(test testsrc)
set(core ${ctx} ${ast} ${syntax} ${compiler} ${diagnostic})
add_executable(kisyshot main.cc ${core})
add_executable(tests ${testsrc} ${core})
