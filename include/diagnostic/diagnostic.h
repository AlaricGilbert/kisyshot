#pragma once
#include <memory>
#include <vector>
#include <string>

#include <context.h>
#include <rang/rang.h>
namespace kisyshot::diagnostic {
    /**
     * DiagnosticKind describes the severity of an compile issue, notes and warnings won't stop the compiling while
     * errors will stop the compiling.
     */
    enum DiagnosticKind {
        Note,
        Warning,
        Error
    };

    /**
     * DiagnosticLocation is a union which saves a set of token locations which will be used in locate the errors
     */
    struct DiagnosticLocation {
        std::size_t start;
        std::size_t finish;
        std::size_t caret;
        std::string label;
        rang::fg color;
        DiagnosticLocation(std::size_t start, std::size_t finish, std::size_t caret, std::string label);
        explicit DiagnosticLocation(std::size_t caret);
    };

    /**
     * Diagnostic is a message generated by lexer or parser, which implies there is something not running as expected
     * while compiling the source file.
     */
    class Diagnostic {
        DiagnosticKind _kind;
        std::vector<DiagnosticLocation> _locations;
        std::vector<std::string> _emphasize;
        std::shared_ptr<Context> _context;
        std::string _message;
    public:
        /**
         * Creates a blank diagnostic which only have kind, message and error context
         * @param kind
         * @param context
         * @param message
         */
        Diagnostic(DiagnosticKind kind, std::shared_ptr<Context> context, std::string message);
        /**
         * Add a error location into the diagnostic
         * @param start
         * @param finish
         * @param caret
         * @param label
         * @return
         */
        Diagnostic& at(std::size_t start, std::size_t finish, std::size_t caret, std::string label);
        Diagnostic& at(std::size_t caret);
        Diagnostic& emphasize(std::string emphasize);
        void writeTo(std::ostream& stream) const;
    };
}